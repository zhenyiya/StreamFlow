// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/zhenyiya/StreamFlow/artifacts/message/message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	github.com/zhenyiya/StreamFlow/artifacts/message/message.proto

It has these top-level messages:
	CardMessage
	Status
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import card "github.com/zhenyiya/StreamFlow/artifacts/card"
import digest "github.com/zhenyiya/StreamFlow/artifacts/digest"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Card from public import github.com/zhenyiya/StreamFlow/artifacts/card/card.proto
type Card card.Card

func (m *Card) Reset()         { (*card.Card)(m).Reset() }
func (m *Card) String() string { return (*card.Card)(m).String() }
func (*Card) ProtoMessage()    {}
func (m *Card) GetIP() string  { return (*card.Card)(m).GetIP() }
func (m *Card) GetPort() int32 { return (*card.Card)(m).GetPort() }
func (m *Card) GetAlive() bool { return (*card.Card)(m).GetAlive() }
func (m *Card) GetAPI() string { return (*card.Card)(m).GetAPI() }
func (m *Card) GetSeed() bool  { return (*card.Card)(m).GetSeed() }

// Digest from public import github.com/zhenyiya/StreamFlow/artifacts/digest/digest.proto
type Digest digest.Digest

func (m *Digest) Reset()         { (*digest.Digest)(m).Reset() }
func (m *Digest) String() string { return (*digest.Digest)(m).String() }
func (*Digest) ProtoMessage()    {}
func (m *Digest) GetCards() map[string]*Card {
	o := (*digest.Digest)(m).GetCards()
	if o == nil {
		return nil
	}
	s := make(map[string]*Card, len(o))
	for k, v := range o {
		s[k] = (*Card)(v)
	}
	return s
}
func (m *Digest) GetTs() int64 { return (*digest.Digest)(m).GetTs() }

type CardMessage_Type int32

const (
	CardMessage_ACK  CardMessage_Type = 0
	CardMessage_ACK2 CardMessage_Type = 1
	CardMessage_ACK3 CardMessage_Type = 2
	CardMessage_SYNC CardMessage_Type = 3
)

var CardMessage_Type_name = map[int32]string{
	0: "ACK",
	1: "ACK2",
	2: "ACK3",
	3: "SYNC",
}
var CardMessage_Type_value = map[string]int32{
	"ACK":  0,
	"ACK2": 1,
	"ACK3": 2,
	"SYNC": 3,
}

func (x CardMessage_Type) String() string {
	return proto.EnumName(CardMessage_Type_name, int32(x))
}
func (CardMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type CardMessage struct {
	Cluster string           `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	From    *card.Card       `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To      *card.Card       `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	Status  *Status          `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Type    CardMessage_Type `protobuf:"varint,5,opt,name=type,enum=message.CardMessage_Type" json:"type,omitempty"`
	Digest  *digest.Digest   `protobuf:"bytes,6,opt,name=digest" json:"digest,omitempty"`
}

func (m *CardMessage) Reset()                    { *m = CardMessage{} }
func (m *CardMessage) String() string            { return proto.CompactTextString(m) }
func (*CardMessage) ProtoMessage()               {}
func (*CardMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CardMessage) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *CardMessage) GetFrom() *card.Card {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CardMessage) GetTo() *card.Card {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *CardMessage) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CardMessage) GetType() CardMessage_Type {
	if m != nil {
		return m.Type
	}
	return CardMessage_ACK
}

func (m *CardMessage) GetDigest() *digest.Digest {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Status struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Status) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*CardMessage)(nil), "message.CardMessage")
	proto.RegisterType((*Status)(nil), "message.Status")
	proto.RegisterEnum("message.CardMessage_Type", CardMessage_Type_name, CardMessage_Type_value)
}

func init() {
	proto.RegisterFile("github.com/zhenyiya/StreamFlow/artifacts/message/message.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xa5, 0x7f, 0x28, 0x3f, 0x86, 0x84, 0x5f, 0xb3, 0xf1, 0xb0, 0x72, 0x30, 0x84, 0x83, 0x72,
	0x61, 0x4b, 0x20, 0xf1, 0x60, 0xbc, 0x60, 0x4d, 0x3c, 0x10, 0x0d, 0x29, 0x5e, 0xf4, 0xb6, 0x94,
	0x05, 0x89, 0x25, 0x4b, 0x76, 0xa7, 0x26, 0x7c, 0x0d, 0x3f, 0xb1, 0xe9, 0xee, 0xd6, 0x98, 0x78,
	0xc1, 0x4b, 0xe7, 0xcf, 0x9b, 0x37, 0x79, 0xf3, 0xba, 0x70, 0xbb, 0xdd, 0xe1, 0x5b, 0xb9, 0x62,
	0xb9, 0xdc, 0x27, 0x0f, 0x32, 0x95, 0x45, 0xc1, 0x57, 0x52, 0x71, 0x14, 0x89, 0x56, 0x79, 0xc2,
	0x15, 0xee, 0x36, 0x3c, 0x47, 0x9d, 0xec, 0x85, 0xd6, 0x7c, 0x2b, 0xea, 0xc8, 0x0e, 0x4a, 0xa2,
	0x24, 0x2d, 0x57, 0xf6, 0xae, 0x4f, 0x5c, 0x93, 0x73, 0xb5, 0x36, 0x1f, 0xbb, 0xa0, 0x77, 0x73,
	0x22, 0x6f, 0xbd, 0xdb, 0x0a, 0x8d, 0x2e, 0x58, 0xee, 0xe0, 0xd3, 0x87, 0x4e, 0xca, 0xd5, 0xfa,
	0xd1, 0x6a, 0x20, 0x14, 0x5a, 0x79, 0x51, 0x6a, 0x14, 0x8a, 0x7a, 0x7d, 0x6f, 0xd8, 0xce, 0xea,
	0x92, 0x5c, 0x40, 0xb8, 0x51, 0x72, 0x4f, 0xfd, 0xbe, 0x37, 0xec, 0x4c, 0x80, 0x19, 0x01, 0x15,
	0x35, 0x33, 0x7d, 0xd2, 0x03, 0x1f, 0x25, 0x0d, 0x7e, 0xa1, 0x3e, 0x4a, 0x72, 0x05, 0x91, 0x46,
	0x8e, 0xa5, 0xa6, 0xa1, 0xc1, 0xff, 0xb3, 0xda, 0x82, 0xa5, 0x69, 0x67, 0x0e, 0x26, 0x23, 0x08,
	0xf1, 0x78, 0x10, 0xb4, 0xd9, 0xf7, 0x86, 0xdd, 0xc9, 0xf9, 0xf7, 0xd8, 0x0f, 0x89, 0xec, 0xf9,
	0x78, 0x10, 0x99, 0x19, 0x23, 0x97, 0x10, 0xd9, 0x6b, 0x68, 0x64, 0xf6, 0x76, 0x99, 0x3b, 0xee,
	0xde, 0x84, 0xcc, 0xa1, 0x83, 0x11, 0x84, 0x15, 0x8b, 0xb4, 0x20, 0x98, 0xa5, 0xf3, 0xb8, 0x41,
	0xfe, 0x41, 0x38, 0x4b, 0xe7, 0x93, 0xd8, 0x73, 0xd9, 0x34, 0xf6, 0xab, 0x6c, 0xf9, 0xf2, 0x94,
	0xc6, 0xc1, 0x60, 0x0c, 0x91, 0xd5, 0x45, 0x62, 0x08, 0xde, 0xc5, 0xd1, 0x59, 0x51, 0xa5, 0xe4,
	0x0c, 0x9a, 0x1f, 0xbc, 0x28, 0x85, 0xf1, 0xa1, 0x9d, 0xd9, 0xe2, 0x6e, 0xfc, 0xca, 0xfe, 0xf6,
	0x06, 0x16, 0x8d, 0x85, 0xb7, 0x8a, 0xcc, 0x3f, 0x98, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe4,
	0x3a, 0x06, 0xaa, 0x40, 0x02, 0x00, 0x00,
}
